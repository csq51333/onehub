1.一个对象的隐式原型指向构造该对象的构造函数的原型

2.function也是一个特殊对象（/实例，Function构造器）

函数才有prototype。而__proto__是对象才有。__proto__指向构造它这个对象的构造器的prototype，但是函数是特殊对象

所以一个实例/函数的__proto__最终指向，function Object这个函数的prototype

所以函数里有一个prototype属性，prototype里有一个__proto__。当这个prototype也找不到某个方法是会在__proto__里寻找
这个__proto__指向的是上家构造器函数中的prototype，最终指向function Object构造器的prototype,这个prototype中的__proto__是null


对象具有属性__proto__，每个对象都会在其内部初始化一个属性，就是__proto__，当我们访问一个对象的属性 时，如果这个对象内部不存在这个属性，那么他就会去__proto__里找这个属性，这个__proto__又会有自己的__proto__，于是就这样 一直找下去，也就是我们平时所说的原型链的概念。__proto__可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型，这也保证了实例能够访问在构造函数原型中定义的属性和方法。


总结：
1.实例/对象只有__proto__隐式原型，指向其构造函数的prototype
2.仅函数才有prototype显示原型，函数是特殊对象，所以也有__proto__，指向new Function的prototype
3.Function的prototype中同有__proto__，指向Object这个构造函数的prototype（Function构造自身还是本就是对象？）
4.Object的__proto__为null，因为之所以说JS里，万物皆对象，就是根节点Object构造

每个对象都是实例，要么是new Object要么是new Foo


__proto__原型链路径:

一个实例f1=new Foo: f1.__proto__=>Foo.prototype,(Foo.prototype).__proto__=>Object.prototype
一个函数f2(){}: f2.__proto__=>Funtion.prototype,(Function.prototype).__proto__=>Object.prototype
一个对象obj={}: obj.__proto__=>Object.prototype



网上的总结：
1.对象有属性__proto__,指向该对象的构造函数的原型对象。
2.方法除了有属性__proto__,还有属性prototype，prototype指向该方法的原型对象。
 
__proto__ 与 prototype
显式原型的作用：用来实现基于原型的继承与属性的共享。
隐式原型的作用：构成原型链，同样用于实现基于原型的继承。举个例子，当我们访问obj这个对象中的x属性时，如果在obj中找不到，那么就会沿着__proto__依次查找。


每个函数都包含两个非继承而来的方法：apply()和call()。这两个方法的用途是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值
call，apply前提是运行前面的这个方法，而apply(this,[arg1,arg2...])所传参数arg1..在方法内可以获得，具体函数看函数内部用到何处