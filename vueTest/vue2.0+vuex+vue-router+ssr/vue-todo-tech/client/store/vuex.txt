npm i vuex后创建store文件夹下创建store.js

引入vuex，还要引入Vue，然后Vue.use(Vuex),这里跟router还不一样，
vuex要在引入应用入口文件index.js之前就Vue.use（Vuex）,而router在index.js里再Vue.use(router)也可以//此处因为服务端渲染后跟router一样在index.js中引入store，Vue.use()

至于放到index中，vue跟dom一样也是一个树型结构，只有放到最外层，它下面的子节点才都能拿到这个对象

const store = new Vuex.Store({ ... })
配置传入new中这个对象开始：

1.state：这个属性中是初始化的状态值(data?)，如：
new Vuex.Store({ state:{count:0} }),此时初始化一个count=0 状态值

2.mutations：这个属性是专门用来计算state中的值(methods?)，
它内部声明的每个函数的第一个参数默认是state，mutations：{fn(state,num){state.count = num}}
★注意：mutations中定义的其他方法只能传state和唯一一个参数，如果this.$state.commit('updataCount',10,'aaa')
updataCount(state,num,str) --> console.log(str) //undefind
----想传多个数据可以包装成对象传参，this.$state.commit('updataCount'，{num: 10, num2: 20})
mutations下，取得时候可以用解构的方法取updataCount(state,｛num,num2｝){console.log(num,num2)}

3.getters：（computed）

后因为服务端渲染：
结尾要export default ()=>{return new Vuex.store({strict})}，插入到应用入口index.js
在index.js中import store from '../??/store.js'
然后在new Vue中跟添加router一样添加store就行了

在组件里调用vuex的mutations中定义的方法可以用this。$store.commit('方法名',参数1)

以上是vuex最基础的用法，后面为了使用服务端渲染，
首先跟vuerouter一样export 一个方法，这样每次服务端渲染都能新生成一个store，不能每次都用同一个store，
因为每次都用同一个store会有内存溢出的问题，这个点在vuerouter时也提过

4-6 08:20

computed中运用store提供的方法：
之前用this.$store.state.count这样的取法很僵硬
vuex提供：
state中的方法可以通过mapstate获取
getters中的方法可以通过mapGetters获取

引入: import { mapState,mapGetters } from 'vuex'

使用前为了使用...mapState，‘...’这种ES6展开格式，还需安装babel-preset-stage-1

之后就在computed中{ ...mapState(['count']), ...mapGetters(['fullName']), reser(){...}......}

如果想不用state中定义的名字 ...mapState(['count']), 比如想用counter代替state中定义的
可以用obj格式：  ...mapState({couter：'count'}) 或 couter: (state) => state.count

new Vuex.Store（{ strict: true }）严格模式，控制除了mutations以外，其他地方不可修改state中的值

4.actions，与mutations一样存放方法，但它放的是异步的
在vue中用dispatch：this.$store.dispatch('xx')触发actions提供的异步函数，对应的mutations用的是this.$store.commit()


5.module
module：{a:{state:{text:1},mutations:{}},b:{state:{text:2},mutations:{}}}
取：this.$store.state.a.text 或...mapState({ TextA: (state) => state.a.text }）

但是mutation就被vuex默认在一个作用域...mapMutations(['updateCount', 'upTextA'])
mutations不需要，a.xxx去取
如果想区分作用域，在module中的a下面声明一个新属性namespaced: true命名空间
声明时...mapMutations(['updateCount', 'a/upTextA'])
使用时this['a/upTextA'],以变量的形式去取

4-8 4:00 
getters,mutations都能拿到state，module默认是自己所在模块中的state
getters,computed都是要return出去这个值
actions第一个参数是store，模块中的actions第一个参数是ctx相当与store
ctx参数对象中包括：commit,dispatch,getters,rootGetters,rootSrate,state

模块内的getters中的方法，如：textPlus
textPlus（state, getters, rootState, rootGetters）

4-8 12:25
单个模块中：namespaced：true --这个模块的作用域独立，可以起跟父作用域相同的名字
一个模块没加namespaced前，和函数mutations和actions这类的作用域是平级的，可以相互直接掉，
加了之后
父调子：在调a模块的updateTextA函数时：.vue中...map调 : 'a/updateTextA'加模块名
子调父：子模块actions中在commit('父级函数'，参数，{root:true}) 加{root:true}
子调子：前提：actions调另一模块的mutations，先看各自有没有加namespaced：true属性，模块可以有的加namespaced：true，有的不加
             调用者没，被调者没，直接写函数名
             调用者没，被调者有，commit('a/函数名')
             调用者有，被调者没，直接写函数名 + { root: true }
             调用者有，被调者有，commit('a/函数名') + { root: true }
总结：调用一个有namespaced：true的模块的函数要 a/xxx 一个有namespaced：true的模块取调别的要{ root: true }
★注意，第三个参数为{ root: true }才有效，就是没参数，加个空参数commit('conso', '', { root: true })

模块下依旧可以再加模块，无限延伸

动态注册一个模块，router异步加载时，只有某个异步路由组件需要用到，index.js文件
const store = createStore()
store.registerModule('c', {
  state: {
    text: 3
  }
})
unregisterModule，解绑

2.store.watch(（state）=>{},(newState)=>{console.log(newState)})
第一个参数类似getters不用管，第二个函数待第一个参数监听的值改变时触发
（触发后返回的new值是经过第一个函数操作过的值，也就是第一个函数在这里才运行，跟着一起返回）

3.mutations中的函数调用时触发sucscribe
store.subscribe((mutation, state) => {
  console.log(mutation.type) // 函数名
  console.log(mutation.payload) // 函数的参数
})
store.subscribeAction，效果同上，监听actions的参数(action,state)

vue提供API支持webpack热更新功能：
将return new Vuex.Store({...})改为，const store = new Vuex.Store({...})
  if (module.hot) {
    module.hot.accept([
      './state/state',
      './mutations/mutations',
      './getters/getters',
      './actions/actions'
    ], () => {
      const newState = require('./state/state').default
      const newMutations = require('./mutations/mutations').default
      const newGetters = require('./getters/getters').default
      const newActions = require('./actions/actions').default

      store.hotUpdate({
        state: newState,
        mutations: newMutations,
        getters: newGetters,
        actions: newActions
      })
    })
  }

  return store

插件？
plugins: [（store）=> {}]

使用vuex时，对vuex内部值的修改最好都由vuex自己来做